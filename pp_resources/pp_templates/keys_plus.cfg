# This file in /pipresents/pp_resources/pp_templates may be overwritten by updates and is not used by Pi Presents
# copy the file to the pp_io_config directory of the profile that is to use it.

# There is no checking of the content of this file by Pi Presents, try any changes by
#  running from a terminal window so that any exceptions are reported.





# USE
# ===
# This configuration file is for an enhanced version of the GTK4 keyboard driver - pp_kbddriver_plus.py
# It extends pp_kbddriver.py by allowing strings of characters to produce input events. The strings are also 
# stored and can be accessed by track plugins.

# Input events to be generated when a specific-character, any-character, specific-line, or any-line is detected.

# It is useful if a track plugin is used that reads text from the keyboard, such as quizzes.

# !!! NOTE: If using this alternative GTK4 keyboard driver include a  keys.cfg with enabled = no in the profile 
#     or remove keys.cfg from /pipresents/pp_io_config

# DRIVER SECTION
# ================
# title = GTK4 KEYS PLUS  text which is reported on logs and error reports
# enabled = yes   yes/no a driver can be enabled/disabled using this so this file can be left in pp_io_config
# module= pp_kbddriver_plus the python module that implements this driver (without .py). More than one I/O config file can use the same driver.
# bind-printing - yes/no - see INPUT section


# INPUT SECTIONS
# ===============
# section name can be any word but must be unique
# direction = in otherwise the section is ignored
# mode - specific-character, any-character, specific-line, any-line
# name  - the symbolic name of the event which is generated if the input matches the match
# match - the condition for matching which must be extended ASCII printing characters

#  the match conditions and the symbolic name are case sensitive.

# CHARACTER MODES
# ----------------
# The specific-character and any-character modes act like pp_kbddriver.py

#  MATCH CONDITION
#  The allowable conditions are defined in
#  https://gitlab.gnome.org/GNOME/gtk/-/blob/main/gdk/gdkkeysyms.h
#     e.g. match = space
# The legacy <> bracketed key condition is accepted e.g.match = <space>

# In additon to these bindings if bind-printing = yes in the [DRIVER] section all the
# printing extended ASCII characters on the keyboard are automatically bound by
# Pi Presents to the symbolic name pp-key-x   e.g the 'a' key produces pp-key-a and ! pp-key-exclam
# automatic binding of printing keys can be overriden by lines such as match = a

# All keys, including for example left shift and left Ctrl produce keycodes so obtaining a ! character
# by pressing and holding left shift followed by ! will produce the following codes Shift-L and !
# For this reason press and hold keys such as Shift-L should not be matched

# for mode = specific character, match is any keycode defined in the above reference.
# for mode = any character, match is ignored

# LINE MODES
# ----------
# because the characters must be able to be displayed the match condition is limited to printing characters, 
# specifically  a character in the extended ASCII range (20 to 255) other than Delete (127).
# printing characters include the space character
# Enter and Backspace are not a printing characters. Editing of lines is not implemented.

# line is zero or more key presses of printing characters followed by Enter
# for mode = specific line, match condition may be any string of printing characters
# for mode = any line, match is ignored. An event is produced for every Return



# THE REAL STUFF
# ==============

[DRIVER]
title = GTK4 Keys Plus  
enabled = yes
bind-printing = no
module= pp_kbddriver_plus


[PP01]
# bind CTRL-BREAK key for terminating (aborting) Pi Presents
direction = in
mode = specific-character 
match = Break
name = pp-terminate

[PP02]
# alternative for keyboards without BREAK key
direction = none
mode = specific-character 
match = F4
name  = pp-terminate   ; make F4 do an exit in addition to CTRL+BREAK

# DIRECT SYMBOLIC NAMES
# =====================
# pp-shutdownnow and pp-exitpipresents symbolic names cannot be used in the Controls Field of tracks and shows, they operate
# on Pi Presents directly. Use Show Control commands if you want to do the tasks below from a profile.

[PP03]
#  if enabled pressing the k key will cause PP to shutdown the Pi immediately
direction = none
mode = specific-character 
match = k
name = pp-shutdownnow 

[PP04]
#  if enabled pressing the e key will cause PP to exit immediately
direction = none
mode = specific-character 
match = e
name = pp-exitpipresents

[ST01]
direction = in
mode = specific-character 
match = Escape
name = pp-stop

[ST02]
direction = in
mode = specific-character 
match = Up
name = pp-up

[ST03]
direction = in
mode = specific-character 
match = Down
name = pp-down

[ST04]
direction = in
mode = specific-character 
match = Return
name = pp-play
# return is also used for end of line (eol) detection so cannot be used if there is specific-line or any-line sections

[ST05]
direction = in
mode = specific-character
match = space
name = pp-pause


[ST06]
# make key 'a' toggle pause in addition to the spacebar
# if bind-printing = yes and this section is enabled the 'a' key will not be bound to pp-key-a
direction = in
mode = specific-character 
match = a
name = pp-pause

# generate the any-character event if any character is typed
[ST07]
direction = in
mode = any-character 
name = any-character


[ST08]
# generate an any-line event when Return is pressed
# alternative to Return for detecting end of line
direction = in
mode = any-line 
name = any-line


[ST09]
# detect a specific string when Return is pressed after typing again
direction = in
mode = specific-line
match = again
name = specific-line


